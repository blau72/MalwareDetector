using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading.Tasks;

namespace XtremeRAT
{
    public class Class1
    {
        [DllImport("kernel32.dll")]
        private static extern IntPtr LoadLibrary(string dllToLoad);

        [DllImport("kernel32.dll")]
        private static extern IntPtr LockResource(IntPtr hResData);

        [DllImport("kernel32.dll")]
        private static extern IntPtr LoadResource(IntPtr hInstance, IntPtr hResInfo);

        [DllImport("kernel32.dll")]
        private static extern uint SizeofResource(IntPtr hInstance, IntPtr hResInfo);

        [DllImport("Kernel32.dll", EntryPoint = "FindResourceW", SetLastError = true, CharSet = CharSet.Unicode)]
        private static extern IntPtr FindResource(IntPtr hModule, string pName, string pType);

        public string malwareName() { return "XtremeRAT"; }
        public string authorName() { return "Blau"; }

        public bool Check(string file)
        {
            bool ret = false;
            string sFile =  File.ReadAllText(file);
            if(sFile.Contains("UPX"))
            {
                IntPtr hExe = LoadLibrary(file);
                IntPtr hRes = FindResource(hExe, "XTREME", "#10");
                IntPtr hResLoad = LoadResource(hExe, hRes);
                IntPtr lpResLock = LockResource(hResLoad);
                uint hSize = SizeofResource(hExe, hRes);
                ret = (hSize > 0);
            }
            else
            {
                ret = ContainsSequence(File.ReadAllBytes(file), System.Text.Encoding.Unicode.GetBytes("XTREMEBINDER"));
            }

            return ret;
        }


        private bool ContainsSequence(byte[] toSearch, byte[] toFind) //http://stackoverflow.com/questions/19003482/how-to-check-if-list-contains-byte-array
        {
            for (var i = 0; i + toFind.Length < toSearch.Length; i++)
            {
                var allSame = true;
                for (var j = 0; j < toFind.Length; j++)
                {
                    if (toSearch[i + j] != toFind[j])
                    {
                        allSame = false;
                        break;
                    }
                }

                if (allSame)
                {
                    return true;
                }
            }

            return false;
        }


    }
}